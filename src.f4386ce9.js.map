{"version":3,"sources":["js/refs.js","js/convertTime.js","js/timer.js","index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","pad","value","String","padStart","getTimeComponents","time","daysMath","Math","floor","hoursMath","minsMath","secsMath","Timer","constructor","selector","targetDate","start","setInterval","currentTime","Date","now","parse","textContent","CountdownTimer","window","addEventListener"],"mappings":";;;AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EAAA,MAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,uBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,uBAC7BG,KAAMJ,SAASC,cAAc,wBAJxB,QAAA,KAAA;;AC+BN,aA/BD,SAASI,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAG5B,SAASC,EAAkBC,GA0BzB,MAAA,CAAEC,SArBQN,EAAIO,KAAKC,MAAMH,EAAQ,QAqBrBI,UAdDT,EAAIO,KAAKC,MAAOH,EAAQ,MAAyB,OAcrCK,SARbV,EAAIO,KAAKC,MAAOH,EAAQ,KAAoB,MAQrBM,SAFvBX,EAAIO,KAAKC,MAAOH,EAAQ,IAAc,OAGxD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA;;ACAD,aA/BA,IAAA,EAAA,QAAA,aAEA,EAAA,QAAA,oBAGA,MAAM,KAAEX,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,GAASN,EAApC,KAEA,MAAMmB,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAGpBC,QACkBC,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBf,EAAOc,KAAKE,MAAM,KAAKN,YAAcG,GACrC,SAAEZ,EAAF,UAAYG,EAAZ,SAAuBC,EAAvB,SAAiCC,IAAa,EAAkBN,EAAAA,mBAAAA,GACtEX,EAAK4B,YAAchB,EACnBT,EAAMyB,YAAcb,EACpBX,EAAKwB,YAAcZ,EACnBX,EAAKuB,YAAcX,GAClB,MAIP,MAAMY,EAAiB,IAAIX,EAAM,CAC/BE,SAAU,WACVC,WAAY,IAAII,KAAK,kBAGvBK,OAAOC,iBAAiB,SAAUF,EAAeP;;AC9BjD,aADA,QAAA,oBACA,QAAA","file":"src.f4386ce9.js","sourceRoot":"../src","sourcesContent":["export const refs = {\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  mins: document.querySelector('[data-value=\"mins\"]'),\n  secs: document.querySelector('[data-value=\"secs\"]'),\n};\n","function pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nexport function getTimeComponents(time) {\n  /*\n   * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n   * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n   */\n  const daysMath = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n  /*\n   * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n   * остатка % и делим его на количество миллисекунд в одном часе\n   * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n   */\n  const hoursMath = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n  /*\n   * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n   * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n   */\n  const minsMath = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n  /*\n   * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n   * миллисекунд в одной секунде (1000)\n   */\n  const secsMath = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { daysMath, hoursMath, minsMath, secsMath };\n}\n","import { refs } from './refs.js';\n\nimport { getTimeComponents } from './convertTime.js';\n// console.log(getTimeComponents);\n\nconst { days, hours, mins, secs } = refs;\n\nclass Timer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n  }\n\n  start() {\n    const timerId = setInterval(() => {\n      const currentTime = Date.now();\n      const time = Date.parse(this.targetDate) - currentTime;\n      const { daysMath, hoursMath, minsMath, secsMath } = getTimeComponents(time);\n      days.textContent = daysMath;\n      hours.textContent = hoursMath;\n      mins.textContent = minsMath;\n      secs.textContent = secsMath;\n    }, 1000);\n  }\n}\n\nconst CountdownTimer = new Timer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2022'),\n});\n\nwindow.addEventListener('onload', CountdownTimer.start());\n","import './sass/main.scss';\nimport './js/timer.js';\n"]}